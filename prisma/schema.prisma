generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  password  String?
  firstName String?
  lastName  String?
  avatar    String?
  
  role      UserRole   @default(USER)
  status    UserStatus @default(PENDING_VERIFICATION)
  
  emailVerified     Boolean   @default(false)
  emailVerifiedAt   DateTime?
  
  lastLoginAt       DateTime?
  lastActiveAt      DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  sessions           Session[]
  oauthAccounts     OAuthAccount[]
  verificationTokens VerificationToken[]
  passwordResetTokens PasswordResetToken[]
  
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  deviceId  String
  
  refreshToken String   @unique
  accessToken  String?
  
  ipAddress    String?
  userAgent    String?
  deviceInfo   Json?
  
  isActive     Boolean  @default(true)
  expiresAt    DateTime
  lastActiveAt DateTime @default(now())
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, deviceId])
  @@map("sessions")
}

model OAuthAccount {
  id           String @id @default(cuid())
  userId       String
  provider     String
  providerId   String
  providerEmail String?
  
  accessToken  String?
  refreshToken String?
  tokenType    String?
  scope        String?
  expiresAt    DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerId])
  @@unique([provider, userId])
  @@map("oauth_accounts")
}

model VerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  type      String   // EMAIL_VERIFICATION, EMAIL_CHANGE
  
  email     String?  // For email change verification
  expiresAt DateTime
  used      Boolean  @default(false)
  usedAt    DateTime?
  
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  
  expiresAt DateTime
  used      Boolean  @default(false)
  usedAt    DateTime?
  
  ipAddress String?
  userAgent String?
  
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("password_reset_tokens")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String?
  details   Json?
  
  ipAddress String?
  userAgent String?
  
  createdAt DateTime @default(now())
  
  @@map("audit_logs")
}